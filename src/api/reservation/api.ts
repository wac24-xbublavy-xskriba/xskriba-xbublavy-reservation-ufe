/* tslint:disable */
/* eslint-disable */
/**
 * Reservation Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xbublavy@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Ambulance
 */
export interface Ambulance {
    /**
     * 
     * @type {string}
     * @memberof Ambulance
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Ambulance
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Ambulance
     */
    'address': string;
    /**
     * 
     * @type {OfficeHours}
     * @memberof Ambulance
     */
    'officeHours': OfficeHours;
    /**
     * 
     * @type {Array<MedicalExaminations>}
     * @memberof Ambulance
     */
    'medicalExaminations': Array<MedicalExaminations>;
}
/**
 * 
 * @export
 * @interface AmbulanceInput
 */
export interface AmbulanceInput {
    /**
     * 
     * @type {string}
     * @memberof AmbulanceInput
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof AmbulanceInput
     */
    'address': string;
    /**
     * 
     * @type {OfficeHours}
     * @memberof AmbulanceInput
     */
    'officeHours': OfficeHours;
    /**
     * 
     * @type {Array<MedicalExaminations>}
     * @memberof AmbulanceInput
     */
    'medicalExaminations': Array<MedicalExaminations>;
}
/**
 * 
 * @export
 * @interface Examination
 */
export interface Examination {
    /**
     * 
     * @type {Ambulance}
     * @memberof Examination
     */
    'ambulance': Ambulance;
    /**
     * 
     * @type {string}
     * @memberof Examination
     */
    'start': string;
    /**
     * 
     * @type {string}
     * @memberof Examination
     */
    'end': string;
    /**
     * 
     * @type {MedicalExaminations}
     * @memberof Examination
     */
    'examinationType': MedicalExaminations;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const MedicalExaminations = {
    XRay: 'x_ray',
    Mri: 'mri',
    Ct: 'ct',
    Ultrasound: 'ultrasound',
    BloodTest: 'blood_test'
} as const;

export type MedicalExaminations = typeof MedicalExaminations[keyof typeof MedicalExaminations];


/**
 * 
 * @export
 * @interface OfficeHours
 */
export interface OfficeHours {
    /**
     * 
     * @type {string}
     * @memberof OfficeHours
     */
    'open'?: string;
    /**
     * 
     * @type {string}
     * @memberof OfficeHours
     */
    'close'?: string;
}
/**
 * 
 * @export
 * @interface Patient
 */
export interface Patient {
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    'birthday': string;
    /**
     * 
     * @type {Sex}
     * @memberof Patient
     */
    'sex': Sex;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    'bio'?: string;
}


/**
 * 
 * @export
 * @interface PatientInput
 */
export interface PatientInput {
    /**
     * 
     * @type {string}
     * @memberof PatientInput
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof PatientInput
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof PatientInput
     */
    'birthday': string;
    /**
     * 
     * @type {Sex}
     * @memberof PatientInput
     */
    'sex': Sex;
    /**
     * 
     * @type {string}
     * @memberof PatientInput
     */
    'bio'?: string;
}


/**
 * 
 * @export
 * @interface RequestExaminationRequest
 */
export interface RequestExaminationRequest {
    /**
     * 
     * @type {string}
     * @memberof RequestExaminationRequest
     */
    'date': string;
    /**
     * 
     * @type {MedicalExaminations}
     * @memberof RequestExaminationRequest
     */
    'examinationType': MedicalExaminations;
}


/**
 * 
 * @export
 * @interface Reservation
 */
export interface Reservation {
    /**
     * 
     * @type {string}
     * @memberof Reservation
     */
    'id': string;
    /**
     * 
     * @type {Patient}
     * @memberof Reservation
     */
    'patient': Patient;
    /**
     * 
     * @type {Ambulance}
     * @memberof Reservation
     */
    'ambulance': Ambulance;
    /**
     * 
     * @type {string}
     * @memberof Reservation
     */
    'start': string;
    /**
     * 
     * @type {string}
     * @memberof Reservation
     */
    'end': string;
    /**
     * 
     * @type {MedicalExaminations}
     * @memberof Reservation
     */
    'examinationType': MedicalExaminations;
    /**
     * Optional message for the reservation
     * @type {string}
     * @memberof Reservation
     */
    'message'?: string;
}


/**
 * 
 * @export
 * @interface ReservationInput
 */
export interface ReservationInput {
    /**
     * 
     * @type {string}
     * @memberof ReservationInput
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationInput
     */
    'ambulanceId': string;
    /**
     * 
     * @type {string}
     * @memberof ReservationInput
     */
    'patientId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationInput
     */
    'start': string;
    /**
     * 
     * @type {string}
     * @memberof ReservationInput
     */
    'end': string;
    /**
     * 
     * @type {MedicalExaminations}
     * @memberof ReservationInput
     */
    'examinationType': MedicalExaminations;
    /**
     * Optional message for the reservation
     * @type {string}
     * @memberof ReservationInput
     */
    'message'?: string;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const Sex = {
    Male: 'male',
    Female: 'female'
} as const;

export type Sex = typeof Sex[keyof typeof Sex];


/**
 * 
 * @export
 * @interface UpdateReservationRequest
 */
export interface UpdateReservationRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateReservationRequest
     */
    'message'?: string;
}

/**
 * AmbulanceApi - axios parameter creator
 * @export
 */
export const AmbulanceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new ambulance
         * @param {AmbulanceInput} ambulanceInput Ambulance object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAmbulance: async (ambulanceInput: AmbulanceInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceInput' is not null or undefined
            assertParamExists('createAmbulance', 'ambulanceInput', ambulanceInput)
            const localVarPath = `/ambulances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ambulanceInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes an ambulance
         * @param {string} ambulanceId ID of ambulance to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAmbulance: async (ambulanceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('deleteAmbulance', 'ambulanceId', ambulanceId)
            const localVarPath = `/ambulances/{ambulanceId}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an ambulance by ID
         * @param {string} ambulanceId ID of ambulance to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAmbulanceById: async (ambulanceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('getAmbulanceById', 'ambulanceId', ambulanceId)
            const localVarPath = `/ambulances/{ambulanceId}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get reservations for a specific ambulance
         * @param {string} ambulanceId ID of ambulance to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAmbulanceReservationsById: async (ambulanceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('getAmbulanceReservationsById', 'ambulanceId', ambulanceId)
            const localVarPath = `/ambulances/{ambulanceId}/reservations`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of all ambulances
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAmbulances: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ambulances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing ambulance
         * @param {string} ambulanceId ID of ambulance to update
         * @param {AmbulanceInput} ambulanceInput Ambulance object that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAmbulance: async (ambulanceId: string, ambulanceInput: AmbulanceInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('updateAmbulance', 'ambulanceId', ambulanceId)
            // verify required parameter 'ambulanceInput' is not null or undefined
            assertParamExists('updateAmbulance', 'ambulanceInput', ambulanceInput)
            const localVarPath = `/ambulances/{ambulanceId}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ambulanceInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AmbulanceApi - functional programming interface
 * @export
 */
export const AmbulanceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AmbulanceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new ambulance
         * @param {AmbulanceInput} ambulanceInput Ambulance object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAmbulance(ambulanceInput: AmbulanceInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ambulance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAmbulance(ambulanceInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes an ambulance
         * @param {string} ambulanceId ID of ambulance to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAmbulance(ambulanceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAmbulance(ambulanceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get an ambulance by ID
         * @param {string} ambulanceId ID of ambulance to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAmbulanceById(ambulanceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ambulance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAmbulanceById(ambulanceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get reservations for a specific ambulance
         * @param {string} ambulanceId ID of ambulance to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAmbulanceReservationsById(ambulanceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Reservation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAmbulanceReservationsById(ambulanceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of all ambulances
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAmbulances(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Ambulance>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAmbulances(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing ambulance
         * @param {string} ambulanceId ID of ambulance to update
         * @param {AmbulanceInput} ambulanceInput Ambulance object that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAmbulance(ambulanceId: string, ambulanceInput: AmbulanceInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ambulance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAmbulance(ambulanceId, ambulanceInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AmbulanceApi - factory interface
 * @export
 */
export const AmbulanceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AmbulanceApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new ambulance
         * @param {AmbulanceInput} ambulanceInput Ambulance object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAmbulance(ambulanceInput: AmbulanceInput, options?: any): AxiosPromise<Ambulance> {
            return localVarFp.createAmbulance(ambulanceInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes an ambulance
         * @param {string} ambulanceId ID of ambulance to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAmbulance(ambulanceId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAmbulance(ambulanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an ambulance by ID
         * @param {string} ambulanceId ID of ambulance to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAmbulanceById(ambulanceId: string, options?: any): AxiosPromise<Ambulance> {
            return localVarFp.getAmbulanceById(ambulanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get reservations for a specific ambulance
         * @param {string} ambulanceId ID of ambulance to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAmbulanceReservationsById(ambulanceId: string, options?: any): AxiosPromise<Array<Reservation>> {
            return localVarFp.getAmbulanceReservationsById(ambulanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of all ambulances
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAmbulances(options?: any): AxiosPromise<Array<Ambulance>> {
            return localVarFp.getAmbulances(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing ambulance
         * @param {string} ambulanceId ID of ambulance to update
         * @param {AmbulanceInput} ambulanceInput Ambulance object that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAmbulance(ambulanceId: string, ambulanceInput: AmbulanceInput, options?: any): AxiosPromise<Ambulance> {
            return localVarFp.updateAmbulance(ambulanceId, ambulanceInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AmbulanceApi - interface
 * @export
 * @interface AmbulanceApi
 */
export interface AmbulanceApiInterface {
    /**
     * 
     * @summary Create a new ambulance
     * @param {AmbulanceInput} ambulanceInput Ambulance object that needs to be added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceApiInterface
     */
    createAmbulance(ambulanceInput: AmbulanceInput, options?: AxiosRequestConfig): AxiosPromise<Ambulance>;

    /**
     * 
     * @summary Deletes an ambulance
     * @param {string} ambulanceId ID of ambulance to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceApiInterface
     */
    deleteAmbulance(ambulanceId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Get an ambulance by ID
     * @param {string} ambulanceId ID of ambulance to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceApiInterface
     */
    getAmbulanceById(ambulanceId: string, options?: AxiosRequestConfig): AxiosPromise<Ambulance>;

    /**
     * 
     * @summary Get reservations for a specific ambulance
     * @param {string} ambulanceId ID of ambulance to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceApiInterface
     */
    getAmbulanceReservationsById(ambulanceId: string, options?: AxiosRequestConfig): AxiosPromise<Array<Reservation>>;

    /**
     * 
     * @summary Get a list of all ambulances
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceApiInterface
     */
    getAmbulances(options?: AxiosRequestConfig): AxiosPromise<Array<Ambulance>>;

    /**
     * 
     * @summary Update an existing ambulance
     * @param {string} ambulanceId ID of ambulance to update
     * @param {AmbulanceInput} ambulanceInput Ambulance object that needs to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceApiInterface
     */
    updateAmbulance(ambulanceId: string, ambulanceInput: AmbulanceInput, options?: AxiosRequestConfig): AxiosPromise<Ambulance>;

}

/**
 * AmbulanceApi - object-oriented interface
 * @export
 * @class AmbulanceApi
 * @extends {BaseAPI}
 */
export class AmbulanceApi extends BaseAPI implements AmbulanceApiInterface {
    /**
     * 
     * @summary Create a new ambulance
     * @param {AmbulanceInput} ambulanceInput Ambulance object that needs to be added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceApi
     */
    public createAmbulance(ambulanceInput: AmbulanceInput, options?: AxiosRequestConfig) {
        return AmbulanceApiFp(this.configuration).createAmbulance(ambulanceInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes an ambulance
     * @param {string} ambulanceId ID of ambulance to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceApi
     */
    public deleteAmbulance(ambulanceId: string, options?: AxiosRequestConfig) {
        return AmbulanceApiFp(this.configuration).deleteAmbulance(ambulanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an ambulance by ID
     * @param {string} ambulanceId ID of ambulance to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceApi
     */
    public getAmbulanceById(ambulanceId: string, options?: AxiosRequestConfig) {
        return AmbulanceApiFp(this.configuration).getAmbulanceById(ambulanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get reservations for a specific ambulance
     * @param {string} ambulanceId ID of ambulance to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceApi
     */
    public getAmbulanceReservationsById(ambulanceId: string, options?: AxiosRequestConfig) {
        return AmbulanceApiFp(this.configuration).getAmbulanceReservationsById(ambulanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of all ambulances
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceApi
     */
    public getAmbulances(options?: AxiosRequestConfig) {
        return AmbulanceApiFp(this.configuration).getAmbulances(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing ambulance
     * @param {string} ambulanceId ID of ambulance to update
     * @param {AmbulanceInput} ambulanceInput Ambulance object that needs to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceApi
     */
    public updateAmbulance(ambulanceId: string, ambulanceInput: AmbulanceInput, options?: AxiosRequestConfig) {
        return AmbulanceApiFp(this.configuration).updateAmbulance(ambulanceId, ambulanceInput, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PatientApi - axios parameter creator
 * @export
 */
export const PatientApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new patient
         * @param {PatientInput} patientInput Patient object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPatient: async (patientInput: PatientInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientInput' is not null or undefined
            assertParamExists('createPatient', 'patientInput', patientInput)
            const localVarPath = `/patients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patientInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new reservation
         * @param {string} patientId ID of patient for the reservation
         * @param {ReservationInput} reservationInput Reservation object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReservation: async (patientId: string, reservationInput: ReservationInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientId' is not null or undefined
            assertParamExists('createReservation', 'patientId', patientId)
            // verify required parameter 'reservationInput' is not null or undefined
            assertParamExists('createReservation', 'reservationInput', reservationInput)
            const localVarPath = `/patients/{patientId}/reservations`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reservationInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a patient
         * @param {string} patientId ID of patient to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePatient: async (patientId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientId' is not null or undefined
            assertParamExists('deletePatient', 'patientId', patientId)
            const localVarPath = `/patients/{patientId}`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a patient by ID
         * @param {string} patientId ID of patient to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPatientById: async (patientId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientId' is not null or undefined
            assertParamExists('getPatientById', 'patientId', patientId)
            const localVarPath = `/patients/{patientId}`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get reservations for a specific patient
         * @param {string} patientId ID of patient to return reservations for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPatientReservations: async (patientId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientId' is not null or undefined
            assertParamExists('getPatientReservations', 'patientId', patientId)
            const localVarPath = `/patients/{patientId}/reservations`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of all patients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPatients: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/patients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request an examination for a specific patient
         * @param {string} patientId ID of patient to request examination for
         * @param {RequestExaminationRequest} requestExaminationRequest Examination request details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestExamination: async (patientId: string, requestExaminationRequest: RequestExaminationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientId' is not null or undefined
            assertParamExists('requestExamination', 'patientId', patientId)
            // verify required parameter 'requestExaminationRequest' is not null or undefined
            assertParamExists('requestExamination', 'requestExaminationRequest', requestExaminationRequest)
            const localVarPath = `/patients/{patientId}/request-examination`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestExaminationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing patient
         * @param {string} patientId ID of patient to update
         * @param {PatientInput} patientInput Patient object that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePatient: async (patientId: string, patientInput: PatientInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientId' is not null or undefined
            assertParamExists('updatePatient', 'patientId', patientId)
            // verify required parameter 'patientInput' is not null or undefined
            assertParamExists('updatePatient', 'patientInput', patientInput)
            const localVarPath = `/patients/{patientId}`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patientInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PatientApi - functional programming interface
 * @export
 */
export const PatientApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PatientApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new patient
         * @param {PatientInput} patientInput Patient object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPatient(patientInput: PatientInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Patient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPatient(patientInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new reservation
         * @param {string} patientId ID of patient for the reservation
         * @param {ReservationInput} reservationInput Reservation object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReservation(patientId: string, reservationInput: ReservationInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Reservation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createReservation(patientId, reservationInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a patient
         * @param {string} patientId ID of patient to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePatient(patientId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePatient(patientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a patient by ID
         * @param {string} patientId ID of patient to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPatientById(patientId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Patient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPatientById(patientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get reservations for a specific patient
         * @param {string} patientId ID of patient to return reservations for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPatientReservations(patientId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Reservation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPatientReservations(patientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of all patients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPatients(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Patient>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPatients(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Request an examination for a specific patient
         * @param {string} patientId ID of patient to request examination for
         * @param {RequestExaminationRequest} requestExaminationRequest Examination request details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestExamination(patientId: string, requestExaminationRequest: RequestExaminationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Examination>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestExamination(patientId, requestExaminationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing patient
         * @param {string} patientId ID of patient to update
         * @param {PatientInput} patientInput Patient object that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePatient(patientId: string, patientInput: PatientInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Patient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePatient(patientId, patientInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PatientApi - factory interface
 * @export
 */
export const PatientApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PatientApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new patient
         * @param {PatientInput} patientInput Patient object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPatient(patientInput: PatientInput, options?: any): AxiosPromise<Patient> {
            return localVarFp.createPatient(patientInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new reservation
         * @param {string} patientId ID of patient for the reservation
         * @param {ReservationInput} reservationInput Reservation object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReservation(patientId: string, reservationInput: ReservationInput, options?: any): AxiosPromise<Reservation> {
            return localVarFp.createReservation(patientId, reservationInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a patient
         * @param {string} patientId ID of patient to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePatient(patientId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deletePatient(patientId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a patient by ID
         * @param {string} patientId ID of patient to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPatientById(patientId: string, options?: any): AxiosPromise<Patient> {
            return localVarFp.getPatientById(patientId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get reservations for a specific patient
         * @param {string} patientId ID of patient to return reservations for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPatientReservations(patientId: string, options?: any): AxiosPromise<Array<Reservation>> {
            return localVarFp.getPatientReservations(patientId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of all patients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPatients(options?: any): AxiosPromise<Array<Patient>> {
            return localVarFp.getPatients(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request an examination for a specific patient
         * @param {string} patientId ID of patient to request examination for
         * @param {RequestExaminationRequest} requestExaminationRequest Examination request details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestExamination(patientId: string, requestExaminationRequest: RequestExaminationRequest, options?: any): AxiosPromise<Array<Examination>> {
            return localVarFp.requestExamination(patientId, requestExaminationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing patient
         * @param {string} patientId ID of patient to update
         * @param {PatientInput} patientInput Patient object that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePatient(patientId: string, patientInput: PatientInput, options?: any): AxiosPromise<Patient> {
            return localVarFp.updatePatient(patientId, patientInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PatientApi - interface
 * @export
 * @interface PatientApi
 */
export interface PatientApiInterface {
    /**
     * 
     * @summary Create a new patient
     * @param {PatientInput} patientInput Patient object that needs to be added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientApiInterface
     */
    createPatient(patientInput: PatientInput, options?: AxiosRequestConfig): AxiosPromise<Patient>;

    /**
     * 
     * @summary Create a new reservation
     * @param {string} patientId ID of patient for the reservation
     * @param {ReservationInput} reservationInput Reservation object that needs to be added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientApiInterface
     */
    createReservation(patientId: string, reservationInput: ReservationInput, options?: AxiosRequestConfig): AxiosPromise<Reservation>;

    /**
     * 
     * @summary Deletes a patient
     * @param {string} patientId ID of patient to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientApiInterface
     */
    deletePatient(patientId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Get a patient by ID
     * @param {string} patientId ID of patient to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientApiInterface
     */
    getPatientById(patientId: string, options?: AxiosRequestConfig): AxiosPromise<Patient>;

    /**
     * 
     * @summary Get reservations for a specific patient
     * @param {string} patientId ID of patient to return reservations for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientApiInterface
     */
    getPatientReservations(patientId: string, options?: AxiosRequestConfig): AxiosPromise<Array<Reservation>>;

    /**
     * 
     * @summary Get a list of all patients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientApiInterface
     */
    getPatients(options?: AxiosRequestConfig): AxiosPromise<Array<Patient>>;

    /**
     * 
     * @summary Request an examination for a specific patient
     * @param {string} patientId ID of patient to request examination for
     * @param {RequestExaminationRequest} requestExaminationRequest Examination request details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientApiInterface
     */
    requestExamination(patientId: string, requestExaminationRequest: RequestExaminationRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Examination>>;

    /**
     * 
     * @summary Update an existing patient
     * @param {string} patientId ID of patient to update
     * @param {PatientInput} patientInput Patient object that needs to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientApiInterface
     */
    updatePatient(patientId: string, patientInput: PatientInput, options?: AxiosRequestConfig): AxiosPromise<Patient>;

}

/**
 * PatientApi - object-oriented interface
 * @export
 * @class PatientApi
 * @extends {BaseAPI}
 */
export class PatientApi extends BaseAPI implements PatientApiInterface {
    /**
     * 
     * @summary Create a new patient
     * @param {PatientInput} patientInput Patient object that needs to be added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientApi
     */
    public createPatient(patientInput: PatientInput, options?: AxiosRequestConfig) {
        return PatientApiFp(this.configuration).createPatient(patientInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new reservation
     * @param {string} patientId ID of patient for the reservation
     * @param {ReservationInput} reservationInput Reservation object that needs to be added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientApi
     */
    public createReservation(patientId: string, reservationInput: ReservationInput, options?: AxiosRequestConfig) {
        return PatientApiFp(this.configuration).createReservation(patientId, reservationInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a patient
     * @param {string} patientId ID of patient to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientApi
     */
    public deletePatient(patientId: string, options?: AxiosRequestConfig) {
        return PatientApiFp(this.configuration).deletePatient(patientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a patient by ID
     * @param {string} patientId ID of patient to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientApi
     */
    public getPatientById(patientId: string, options?: AxiosRequestConfig) {
        return PatientApiFp(this.configuration).getPatientById(patientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get reservations for a specific patient
     * @param {string} patientId ID of patient to return reservations for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientApi
     */
    public getPatientReservations(patientId: string, options?: AxiosRequestConfig) {
        return PatientApiFp(this.configuration).getPatientReservations(patientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of all patients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientApi
     */
    public getPatients(options?: AxiosRequestConfig) {
        return PatientApiFp(this.configuration).getPatients(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request an examination for a specific patient
     * @param {string} patientId ID of patient to request examination for
     * @param {RequestExaminationRequest} requestExaminationRequest Examination request details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientApi
     */
    public requestExamination(patientId: string, requestExaminationRequest: RequestExaminationRequest, options?: AxiosRequestConfig) {
        return PatientApiFp(this.configuration).requestExamination(patientId, requestExaminationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing patient
     * @param {string} patientId ID of patient to update
     * @param {PatientInput} patientInput Patient object that needs to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientApi
     */
    public updatePatient(patientId: string, patientInput: PatientInput, options?: AxiosRequestConfig) {
        return PatientApiFp(this.configuration).updatePatient(patientId, patientInput, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReservationApi - axios parameter creator
 * @export
 */
export const ReservationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes a reservation
         * @param {string} reservationId ID of reservation to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReservation: async (reservationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reservationId' is not null or undefined
            assertParamExists('deleteReservation', 'reservationId', reservationId)
            const localVarPath = `/reservations/{reservationId}`
                .replace(`{${"reservationId"}}`, encodeURIComponent(String(reservationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a reservation by ID
         * @param {string} reservationId ID of reservation to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReservationById: async (reservationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reservationId' is not null or undefined
            assertParamExists('getReservationById', 'reservationId', reservationId)
            const localVarPath = `/reservations/{reservationId}`
                .replace(`{${"reservationId"}}`, encodeURIComponent(String(reservationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing reservation
         * @param {string} reservationId ID of reservation to update
         * @param {UpdateReservationRequest} updateReservationRequest Reservation object that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReservation: async (reservationId: string, updateReservationRequest: UpdateReservationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reservationId' is not null or undefined
            assertParamExists('updateReservation', 'reservationId', reservationId)
            // verify required parameter 'updateReservationRequest' is not null or undefined
            assertParamExists('updateReservation', 'updateReservationRequest', updateReservationRequest)
            const localVarPath = `/reservations/{reservationId}`
                .replace(`{${"reservationId"}}`, encodeURIComponent(String(reservationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateReservationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReservationApi - functional programming interface
 * @export
 */
export const ReservationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReservationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes a reservation
         * @param {string} reservationId ID of reservation to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReservation(reservationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReservation(reservationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a reservation by ID
         * @param {string} reservationId ID of reservation to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReservationById(reservationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Reservation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReservationById(reservationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing reservation
         * @param {string} reservationId ID of reservation to update
         * @param {UpdateReservationRequest} updateReservationRequest Reservation object that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateReservation(reservationId: string, updateReservationRequest: UpdateReservationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Reservation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateReservation(reservationId, updateReservationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReservationApi - factory interface
 * @export
 */
export const ReservationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReservationApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes a reservation
         * @param {string} reservationId ID of reservation to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReservation(reservationId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteReservation(reservationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a reservation by ID
         * @param {string} reservationId ID of reservation to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReservationById(reservationId: string, options?: any): AxiosPromise<Reservation> {
            return localVarFp.getReservationById(reservationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing reservation
         * @param {string} reservationId ID of reservation to update
         * @param {UpdateReservationRequest} updateReservationRequest Reservation object that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReservation(reservationId: string, updateReservationRequest: UpdateReservationRequest, options?: any): AxiosPromise<Reservation> {
            return localVarFp.updateReservation(reservationId, updateReservationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReservationApi - interface
 * @export
 * @interface ReservationApi
 */
export interface ReservationApiInterface {
    /**
     * 
     * @summary Deletes a reservation
     * @param {string} reservationId ID of reservation to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationApiInterface
     */
    deleteReservation(reservationId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Get a reservation by ID
     * @param {string} reservationId ID of reservation to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationApiInterface
     */
    getReservationById(reservationId: string, options?: AxiosRequestConfig): AxiosPromise<Reservation>;

    /**
     * 
     * @summary Update an existing reservation
     * @param {string} reservationId ID of reservation to update
     * @param {UpdateReservationRequest} updateReservationRequest Reservation object that needs to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationApiInterface
     */
    updateReservation(reservationId: string, updateReservationRequest: UpdateReservationRequest, options?: AxiosRequestConfig): AxiosPromise<Reservation>;

}

/**
 * ReservationApi - object-oriented interface
 * @export
 * @class ReservationApi
 * @extends {BaseAPI}
 */
export class ReservationApi extends BaseAPI implements ReservationApiInterface {
    /**
     * 
     * @summary Deletes a reservation
     * @param {string} reservationId ID of reservation to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationApi
     */
    public deleteReservation(reservationId: string, options?: AxiosRequestConfig) {
        return ReservationApiFp(this.configuration).deleteReservation(reservationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a reservation by ID
     * @param {string} reservationId ID of reservation to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationApi
     */
    public getReservationById(reservationId: string, options?: AxiosRequestConfig) {
        return ReservationApiFp(this.configuration).getReservationById(reservationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing reservation
     * @param {string} reservationId ID of reservation to update
     * @param {UpdateReservationRequest} updateReservationRequest Reservation object that needs to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationApi
     */
    public updateReservation(reservationId: string, updateReservationRequest: UpdateReservationRequest, options?: AxiosRequestConfig) {
        return ReservationApiFp(this.configuration).updateReservation(reservationId, updateReservationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


